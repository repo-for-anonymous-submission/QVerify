theory EB_Adv_MaliciousUser_PostM_FEC_protocol

begin

functions: true/0

functions: BA/1,BB/1

functions: Noise/1, genEntpair/2, Measure/2[private], Sift_key/3, GenKey/1, Sample/3, Check_NoEve/2, Correct/2

equations:
        Check_NoEve(Sample(Sift_key(Measure(genEntpair(Noise(kab),stateid),BA(ba)), BA(ba), BB(bb) ), BA(ba), BB(bb)), Sample(Sift_key(Measure(genEntpair(Noise(kab),stateid),BB(bb)), BA(ba), BB(bb) ), BA(ba), BB(bb)))=true,
        GenKey(Sift_key( Measure(genEntpair(Noise(kab),stateid), BA(ba)), BA(ba), BB(bb) ))=Noise(kab),
        GenKey(Sift_key( Measure(genEntpair(Noise(kab),stateid), BB(bb)), BA(ba), BB(bb) ))=Noise(kab)

functions: Encode/2

equations:
        Check_NoEve(Sample(Sift_key(Measure(genEntpair(Noise(kab),stateid),BA(ba)), BA(ba), BB(bb) ), BA(ba), BB(bb)), Sample(Sift_key(Measure( Encode(Measure(genEntpair(Noise(kab),stateid),BA(ba)), BA(ba) ), BB(bb) ), BA(ba), BB(bb) ),BA(ba), BB(bb)) )=true,
        Check_NoEve(Sample(Sift_key(Measure( Encode(Measure(genEntpair(Noise(kab),stateid),BB(bb)), BB(bb) ), BA(ba) ), BA(ba), BB(bb) ),BA(ba), BB(bb)),Sample(Sift_key(Measure(genEntpair(Noise(kab),stateid),BB(bb)), BA(ba), BB(bb) ), BA(ba), BB(bb)))=true,
        GenKey(Sift_key(Measure( Encode(Measure(genEntpair(Noise(kab),stateid),BB(bb)), BB(bb) ), BA(ba) ), BA(ba), BB(bb) ))=Noise(kab),
        GenKey(Sift_key(Measure( Encode(Measure(genEntpair(Noise(kab),stateid),BA(ba)), BA(ba) ), BB(bb) ), BA(ba), BB(bb) ))=Noise(kab)

functions: mac/2[private], verifymac/2 

equations: verifymac(mac(msg,key),key)=msg

restriction Eq_checks_succeed: "(All x y #j. Eq(x, y) @ j ==> x = y)"

restriction Neq_checks_succeed: "(All x #j. Neq(x, x) @ j ==> F)"
/* Authenticated Classical Channel rules */

rule ChanOut_Auth:
[ Out_Auth(roleA,roleB,msg,type) ]--[ AChanOut(roleA,<msg,type>) ]->
[ !Auth(roleA,roleB,msg,type)]

rule ChanIn_Auth:
[ !Auth(roleA,roleB,msg,type)]--[ AChanIn(roleA,roleB,<msg,type>) ]->
[ In_Auth(roleA,roleB,msg,type) ]
/* Session Setup rules */

restriction OnlyOnce1:
"All #i #j. OnlyOnce1() @i & OnlyOnce1() @j ==> #i = #j"

restriction OnlyOnce2:
"All #i #j. OnlyOnce2() @i & OnlyOnce2() @j ==> #i = #j"

restriction OnlyOnce3:
"All #i #j. OnlyOnce3() @i & OnlyOnce3() @j ==> #i = #j"

rule Setup_AB:
  [ Fr(~sid) ]
  --[OnlyOnce1()]->
  [ 
    QState('A','B',~sid),
    SessionA('A','B',~sid),
    SessionB('A','B',~sid) 
  ]

rule Setup_AE:
  [ Fr(~sid), Fr(~ba), Fr(~bb) ]
  --[ OnlyOnce2()]->
  [ 
    QState('A','E',~sid),
    SessionA('A','E',~sid),
    SessionB('A','E',~sid) 
  ]

rule Setup_EB:
  [ Fr(~sid), Fr(~ba), Fr(~bb) ]
  --[ OnlyOnce3()]->
  [ 
    QState('E','B',~sid),
    SessionA('E','B',~sid),
    SessionB('E','B',~sid) 
  ]
/* Quantum Channel rules */
/* Quantum Channel rules */

rule Charlie_Source_quantum_phase:
 let qA=genEntpair(Noise(~kab),~stateid)
     qB=genEntpair(Noise(~kab),~stateid)
 in
  [ Fr(~stateid), Fr(~kab) ]
  --[ EveKnownsA(qA),EveKnownsB(qB)]->
  [ QuantumA(qA), QuantumB(qB)]

rule Chan_In_Forward:
  [ QuantumA(qA), In(X) ]
  --[EveForgetsA(qA)]->
  [ In_QuantumChannel(X,qA) ]

rule Chan_In_Forward_B:
  [ QuantumB(qB), In(Y) ]
  --[EveForgetsB(qB)]->
  [ In_QuantumChannel(Y,qB) ]
/* Malicious User Rules */

rule Session_Eve_A:
[SessionA('E',Y,~sid_eb)] -->[SessEB('E',Y,~sid_eb), !AuthSession('E',~sid_eb)]

rule Session_Eve_B:
[SessionB(X,'E',~sid_ae)] -->[SessAE(X,'E',~sid_ae), !AuthSession('E',~sid_ae)]

rule Eve_as_A_In_Auth:
  [ In(Sender), In_Auth(Sender,'E',msg,type)  ] --> [ Out(<msg,type>) ]

rule Eve_as_A_Out_Auth:
  [ In(<Receiver,msg,type>)] --> [ Out_Auth('E',Receiver,msg,type) ]

rule Alice_quantum_phase:
 let 
    KAraw=Measure(qA,BA(~ba))
 in
 [
  Fr(~ba), 
  In_QuantumChannel('A',qA), 
  SessionA('A',Y,~sid)
  ] 
 --[
   SessionInitA('A',Y,~sid), 
   Create_A('B',~sid)
   ]-> 
 [
   !AuthSession('A',~sid),
   MeasuredA('A',Y,~sid,KAraw), 
   AliceBasis('A',Y,~sid,BA(~ba)), 
   GetBobBasis('A',Y,~sid)
]

rule Alice_Send_BA:
 [AliceBasis('A',Y,sid,BA)]
 --[Send_BA('A',Y,BA)]->
 [Out_Auth('A',Y,BA,'sift'), Alice_Sent_BA('A',Y,BA)]

rule Alice_Receive_BB:
 [GetBobBasis('A',Y,sid), In_Auth(Y,'A',BB,'sift')]
 --[Receive_BB(Y,'A',BB)]->
 [Alice_Received_BB('A',Y,BB)]

rule Alice_SiftA:
 let 
    KA=Sift_key(KAraw,BA,BB)
 in
 [ 
  MeasuredA('A',Y,sid,KAraw), 
  Alice_Sent_BA('A',Y,BA), 
  Alice_Received_BB('A',Y,BB) 
]
 --[ 
  Running_A('A',Y,sid),
  SiftA('A',Y,sid,KA)
]->
 [
  SifttedKeyA('A',Y,sid,KA), 
  SampleKeyA('A',Y,sid,BA,BB,KA), 
  GetSampleA('A',Y,sid)
]

rule Alice_Send_SampleA:
 let
    KsampleA=Sample(KA,BA,BB)
 in
 [SampleKeyA('A',Y,~sid,BA,BB,KA)]
 --[Send_SampleA('A',Y,KsampleA)]->
 [
   Out_Auth('A',Y,KsampleA,'sample'), 
   Alice_Sent_KsampleA('A',Y,~sid,KsampleA)
 ]

rule Alice_Receive_SampleB:
 [GetSampleA('A',Y,~sid), In_Auth(Y,'A',KsampleB,'sample')]
 --[Receive_SampleB(Y,'A',KsampleB)]->
 [Alice_Received_KsampleB('A',Y,~sid,KsampleB)]

rule Alice_Paramater_Estimation_NoEve:
 let
    NoEve=Check_NoEve(KsampleA,KsampleB)
 in 
 [
   SifttedKeyA('A',Y,~sid,KA), 
   Alice_Sent_KsampleA('A',Y,~sid,KsampleA), 
   Alice_Received_KsampleB('A',Y,~sid,KsampleB)
 ]
 --[Eq(true,NoEve)]->
 [KeywithErrorA('A',Y,~sid,KA)]

rule Alice_Paramater_Estimation_Eve:
 let
    NoEve=Check_NoEve(KsampleA,KsampleB)
 in 
 [
   Alice_Sent_KsampleA('A',Y,~sid,KsampleA), 
   Alice_Received_KsampleB('A',Y,~sid,KsampleB)
 ]
 --[
   Neq(true,NoEve), 
   EveDetected_A('A',Y,~sid)
 ]->
 []

rule Bob_quantum_phase:
 let 
    KBraw=Measure(qB,BB(~bb)) 
 in
 [
  Fr(~bb),
  SessionB(X,'B',~sid), 
  In_QuantumChannel('B',qB)
] 
 --[
  SessionInitB(X,'B',~sid), 
  Create_B('A',~sid)
  ]-> 
 [
  !AuthSession('B',~sid),
  MeasuredB(X,'B',~sid,KBraw), 
  BobBasis(X,'B',~sid,BB(~bb)), 
  GetAliceBasis(X,'B',~sid)
]

rule Bob_Send_BB:
 [BobBasis(X,'B',sid,BB)]
 --[Send_BB('B',X,BB)]->
 [Out_Auth('B',X,BB,'sift'), Bob_Sent_BB('B',X,BB)]

rule Bob_Receive_BA:
 [GetAliceBasis(X,'B',sid), In_Auth(X,'B',BA,'sift')]
 --[Receive_BA(X,'B',BA)]->
 [Bob_Received_BA(X,'B',BA)]

rule Bob_SiftB:
 let 
  KB=Sift_key(KBraw,BA,BB)
 in
 [ MeasuredB(X,'B',sid,KBraw), Bob_Sent_BB('B',X,BB), Bob_Received_BA(X,'B',BA) ]
 --[Running_B(X,'B',sid),SiftB(X,'B',sid,KB)]->
 [SifttedKeyB(X,'B',sid,KB), SampleKeyB(X,'B',sid,BA,BB,KB), GetSampleB(X,'B',sid)]

rule Bob_Send_SampleB:
 let
    KsampleB=Sample(KB,BA,BB)
 in
 [SampleKeyB(X,'B',~sid,BA,BB,KB)]
 --[Send_SampleB('B',X,KsampleB)]->
 [
   Out_Auth('B',X,KsampleB,'sample'), 
   Bob_Sent_KsampleB(X,'B',~sid,KsampleB)
 ]

rule Bob_Receive_SampleA:
 [
   GetSampleB(X,'B',~sid), 
   In_Auth(X,'B',KsampleA,'sample')
 ]
 --[Receive_SampleA(X,'B',KsampleA)]->
 [Bob_Received_KsampleA(X,'B',~sid,KsampleA)]

rule Bob_Paramater_Estimation_NoEve:
 let
    NoEve=Check_NoEve(KsampleA,KsampleB)
    KAB=GenKey(KB)
 in 
 [
   SifttedKeyB(X,'B',~sid,KB), 
   Bob_Sent_KsampleB(X,'B',~sid,KsampleB), 
   Bob_Received_KsampleA(X,'B',~sid,KsampleA)
 ]
 --[Eq(true,NoEve)]->
 [KeywithErrorB(X,'B',~sid,KB)]

rule Bob_Paramater_Estimation_Eve:
 let
    NoEve=Check_NoEve(KsampleA,KsampleB)
 in 
 [
   Bob_Sent_KsampleB(X,'B',~sid,KsampleB), 
   Bob_Received_KsampleA(X,'B',~sid,KsampleA)
 ]
 --[
   Neq(true,NoEve), 
   EveDetected_B(X,'B',~sid)
 ]->
 []

functions: FEC/1

equations: Correct(Noise(kab),FEC(Noise(kab)))=kab

rule Alice_FEC:
 let
    NKAB=GenKey(KA)   
    EA=FEC(NKAB)
    KAB=Correct(NKAB, EA)
 in 
 [
   KeywithErrorA('A',Y,~sid,KA)
 ]
 --[
   CommitKey_A('A',Y,~sid,KAB)
 ]->
 [Out_Auth('A',Y,EA,'error')]

rule Bob_FEC:
 let
    NKAB=GenKey(KB)   
    KAB=Correct(NKAB, EA)
 in 
 [KeywithErrorB(X,'B',~sid,KB), In_Auth(X,'B',EA,'error')]
 --[SharedKeyB(X,'B',~sid,KAB), CommitKey_B(X,'B',~sid,KAB)]->
 []

lemma Executability[sources]:
exists-trace
"Ex A B sid Kab #i #j.
      CommitKey_A(A,B,sid,Kab)@i
    & CommitKey_B(A,B,sid,Kab)@j    
"

lemma messsage_authenticiation[sources]:
"All A B msg #i.
     AChanIn(A,B,msg)@i ==> 
     Ex #k. AChanOut(A,msg)@k"

lemma secret_key_A:
"All A B sid Kab #init #i #j.
    SessionInitA(A,B,sid)@init
  & CommitKey_A(A,B,sid,Kab)@i
  & K(Kab)@j
  ==> F
"

lemma secret_key_B:
"All A B sid Kab #init #i #j.
    SessionInitB(A,B,sid)@init
  & CommitKey_B(A,B,sid,Kab)@i
  & K(Kab)@j
  ==> F
"

lemma aliveness_A:
  "All B sid kab #i.
    CommitKey_A('A',B,sid,kab) @i
    ==> (Ex #j. Create_B('A',sid) @j)
  "

lemma aliveness_B:
  "All A sid kab #i.
    CommitKey_B(A,'B',sid,kab) @i
    ==> (Ex #j. Create_A('B',sid) @j
      & j < i)
  "

lemma weak_agreement_A:
  "All B sid kab #i.
  CommitKey_A('A',B,sid,kab) @i
    ==> (Ex sid2 #j. Running_B('A',B,sid2) @j)
  "

lemma weak_agreement_B:
  "All A sid kab #i.
  CommitKey_B(A,'B',sid,kab) @i
    ==> (Ex sid2 #j. Running_A(A,'B',sid2) @j)
  "

lemma noninjectiveagreement_A:
  "All B sid kab #i.
    CommitKey_A('A',B,sid,kab) @i
    ==> (Ex #j. CommitKey_B('A',B,sid,kab) @j)
  "

lemma noninjectiveagreement_B:
  "All A sid kab #i.
    CommitKey_B(A,'B',sid,kab) @i
    ==> (Ex #j. CommitKey_A(A,'B',sid,kab) @j)
  "
end